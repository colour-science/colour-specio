[project]
name = "colour-specio"
version = "0.4.2a0"
description = "Instrument control for spectrometers"
authors = [{ name = "Tucker Downs", email = "tucker@tjdcs.dev" }]
maintainers = [{ name = "Tucker Downs", email = "tucker@tjdcs.dev" }]
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.12,<3.14"
keywords = [
    "colour-science",
    "spectrometer",
    "colorimeter",
    "instrument-control",
    "color-measurement",
    "spectral-data",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Hardware :: Hardware Drivers",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "colour-science>=0.4.6",
    "numpy>=2.3.1",
    "pyserial>=3.5",
    "protobuf>=5.27.0",
    "bidict>=0.23.1",
    "aenum>=3.1.16",
    "xxhash>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/tjdcs/specio"
Repository = "https://github.com/tjdcs/specio.git"
Issues = "https://github.com/tjdcs/specio/issues"

[project.scripts]
csmf_doctor = "specio.scripts.csmf_doctor:main"
csmf_anonymize = "specio.scripts.csmf_anonymize:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["specio"]
include = ["LICENSE"]
exclude = [
    "data/",
    "examples/",
    "junk/",
    "manuals/",
    "scripts/",
    "tests/",
    "**/*CLAUDE.md",
    "specio/**/tests",
]

[dependency-groups]
dev = [
    "invoke>=2.2.0",
    "pre-commit>=4.2.0",
    "pyright>=1.1.403",
    "pytest>=8.4.1",
    "pytest-xdist>=3.6.0",
    "ruff>=0.12.3",
]
extras = ["matplotlib>=3.7.0", "ipykernel>=6.25.0", "pandas>=2.0.0"]

[tool.ruff]
line-length = 88
target-version = "py313"
exclude = ["*_pb2.py", "*_pb2.pyi"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "C90", # mccabe complexity
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501", # Line too long (handled by formatter)
    "B008", # Do not perform function calls in argument defaults
    "T201", # Print found (allow for debugging)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG", "T20"]
"specio/**/tests/*" = ["ARG", "T20"]
"scripts/*" = ["T201"]
"examples/*" = ["T201"]

[tool.ruff.lint.isort]
known-first-party = ["specio"]
split-on-trailing-comma = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pyright]
include = ["examples", "tests", "specio"]
exclude = ["**/__pycache__", "**/*_pb2.py", "**/*_pb2.pyi"]
venvPath = "."
venv = ".venv"
pythonVersion = "3.13"
typeCheckingMode = "standard"
reportMissingImports = true
reportMissingTypeStubs = false
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportInconsistentConstructor = true
reportMissingParameterType = true
reportMissingReturnType = true
reportUnnecessaryTypeIgnoreComment = true
reportMissingModuleSource = false
reportUnboundVariable = false
reportUnnecessaryCast = true
reportUnsupportedDunderAll = false
reportUnusedExpression = false

[tool.pytest.ini_options]
testpaths = ["tests", "specio"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
norecursedirs = [".*", "*.egg", "dist", "build", "__pycache__", "*.pyc"]
ignore_glob = ["**/*_pb2.py", "**/*_pb2.pyi"]
