"""
Virtual device implementations for testing and development.
"""

from functools import cached_property
from typing import final

import numpy as np
from colour import SpragueInterpolator, sd_multi_leds
from colour.colorimetry.tristimulus_values import sd_to_XYZ

from specio.common.colorimeters import Colorimeter, RawColorimeterMeasurement
from specio.common.spectrometers import RawSPDMeasurement, SpecRadiometer

__version__ = "0.4.1.post0"
__author__ = "Tucker Downs"
__copyright__ = "Copyright 2022 Specio Developers"
__license__ = "BSD-3-Clause"
__maintainer__ = "Tucker Downs"
__email__ = "tucker@tjdcs.dev"
__status__ = "Development"

__all__ = [
    "VirtualColorimeter",
    "VirtualSpectrometer",
]


@final
class VirtualSpectrometer(SpecRadiometer):
    """
    Basic spectroradiometer interface. Implements a virtual spectrometer
    returning random colors for basic testing
    """

    def __init__(self):
        super().__init__()

    @property
    def manufacturer(self) -> str:
        """Return "specio" as the manufacturer of this virtual spectrometer

        Returns
        -------
        str
        """
        return "specio"

    @cached_property
    def model(self) -> str:
        """The model name or model signature from the spectrometer.

        Returns
        -------
        str
        """
        return "Virtual Random Spectrometer"

    @property
    def serial_number(self) -> str:
        """The serial number of the spectrometer

        Returns
        -------
        str
        """
        return "0000-0000"

    def _raw_measure(self) -> RawSPDMeasurement:
        """Return a random SPD generated by combining three gaussian spectra

        Returns
        -------
        RawMeasurement
            A simple dataclass with the required parameters to produce fully
            defined :class:`specio.spectrometers.common.Measurement`
        """
        peaks = np.random.randint([460, 510, 600], [480, 570, 690], 3)
        widths = np.random.randint(40, 80, 3)
        powers = np.random.randint(10, 40, 3) / 1000
        spd = sd_multi_leds(
            peak_wavelengths=peaks,
            half_spectral_widths=widths / 2,
            peak_power_ratios=powers,
        )
        spd.interpolator = SpragueInterpolator

        _measurement = RawSPDMeasurement(
            spd=spd,
            exposure=1,
            spectrometer_id="Virtual Spectrometer",
        )
        return _measurement


@final
class VirtualColorimeter(Colorimeter):
    """
    Basic colorimeter interface. Implements a virtual colorimeter
    returning random colors for basic testing
    """

    def __init__(self):
        super().__init__()

    @property
    def manufacturer(self) -> str:
        """Return "specio" as the manufacturer of this virtual colorimeter

        Returns
        -------
        str
        """
        return "specio"

    @cached_property
    def model(self) -> str:
        """The model name or model signature from the colorimeter.

        Returns
        -------
        str
        """
        return "Virtual Random Colorimeter"

    @property
    def serial_number(self) -> str:
        """The serial number of the colorimeter

        Returns
        -------
        str
        """
        return "0000-0000"

    def _raw_measure(self) -> RawColorimeterMeasurement:
        """Return a random SPD generated by combining three gaussian spectra

        Returns
        -------
        RawMeasurement
            A simple dataclass with the required parameters to produce fully
            defined :class:`specio.spectrometers.common.Measurement`
        """
        peaks = np.random.randint([460, 510, 600], [480, 570, 690], 3)
        widths = np.random.randint(40, 80, 3)
        powers = np.random.randint(10, 40, 3) / 1000
        spd = sd_multi_leds(
            peak_wavelengths=peaks,
            half_spectral_widths=widths / 2,
            peak_power_ratios=powers,
        )

        _measurement = RawColorimeterMeasurement(
            XYZ=sd_to_XYZ(spd, k=683),
            exposure=1.0,
            device_id="Virtual Colorimeter",
        )
        return _measurement
